# Flask/FastAPI# –ó–∞–ø—É—Å–∫ PyCharm –¢–µ—Ä–º–∏–Ω–∞–ª uvicorn backend.app:app --reload
# –ó–∞–ø—É—Å–∫: python -m uvicorn backend.app:app --reload --port 8000
# Flask/FastAPI
# –ó–∞–ø—É—Å–∫ —Å Gitpod: python -m 2025-09-23T17:25:55.883732211Z ==> Running 'uvicorn backend.app:app --host 0.0.0.0 --port $PORT'


from fastapi import FastAPI, BackgroundTasks, UploadFile, File
from fastapi.responses import FileResponse, HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from pathlib import Path
import uuid
import time

from backend.analysis import run_analysis

app = FastAPI()

# –ü—É—Ç–∏
BASE_DIR = Path(__file__).resolve().parent
UPLOAD_DIR = BASE_DIR / "data"                  # –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
RESULTS_DIR = BASE_DIR / "static" / "results"   # –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã

UPLOAD_DIR.mkdir(exist_ok=True)
RESULTS_DIR.mkdir(parents=True, exist_ok=True)

# –†–∞–∑–¥–∞—ë–º /static
app.mount("/static", StaticFiles(directory=BASE_DIR / "static"), name="static")


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/", response_class=HTMLResponse)
def read_root():
    index_path = BASE_DIR / "static" / "index.html"
    return index_path.read_text(encoding="utf-8")


# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
def cleanup_old_files():
    now = time.time()
    for file in RESULTS_DIR.glob("analysis_*.xlsx"):
        try:
            if now - file.stat().st_mtime > 86400:  # —Å—Ç–∞—Ä—à–µ 1 —Å—É—Ç–æ–∫
                file.unlink()
                print(f"üßπ –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {file}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file.name}: {e}")

# # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ (—Å—Ç–∞—Ä—à–µ 1 —Å—É—Ç–æ–∫) gpt
# def cleanup_old_files():
#     now = time.time()
#     for file in RESULTS_DIR.glob("analysis_*.xlsx"):
#         try:
#             if now - file.stat().st_mtime > 86400:  # 24 —á–∞—Å–∞
#                 file.unlink()
#                 print(f"üßπ –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {file}")
#         except Exception as e:
#             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file.name}: {e}")


# –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
@app.post("/analyze")
async def analyze_file(background_tasks: BackgroundTasks,
                       file: UploadFile = File(...)) -> JSONResponse:
    task_id = str(uuid.uuid4())

    input_path = UPLOAD_DIR / f"input_{task_id}.xlsx"
    out_file = RESULTS_DIR / f"analysis_{task_id}.xlsx"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(input_path, "wb") as f:
        f.write(await file.read())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ–Ω–µ
    background_tasks.add_task(run_analysis, out_file, input_path, task_id)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ–Ω–µ
    background_tasks.add_task(cleanup_old_files)

    return {"task_id": task_id}

# gpt
# @app.post("/analyze")
# async def analyze_file(background_tasks: BackgroundTasks,
#     file: UploadFile = File(...)
# ) -> JSONResponse:
#     task_id = str(uuid.uuid4())
#     input_path = UPLOAD_DIR / f"input_{task_id}.xlsx"
#     out_file = RESULTS_DIR / f"analysis_{task_id}.xlsx"
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
#     with open(input_path, "wb") as f:
#         f.write(await file.read())
#
#     # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ–Ω–µ
#     background_tasks.add_task(run_analysis, out_file, input_path, task_id)
#
#     # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ–Ω–µ
#     background_tasks.add_task(cleanup_old_files)
#
#     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç + taskId
#     return JSONResponse({
#         "taskId": task_id,
#         "result_url": f"/static/results/analysis_{task_id}.xlsx"
#     })



# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
@app.get("/status/{task_id}")
def status(task_id: str):
    out_file = RESULTS_DIR / f"analysis_{task_id}.xlsx"
    return {"ready": out_file.exists()}


# # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
@app.get("/download/{task_id}")
def download_file(task_id: str):
    out_file = RESULTS_DIR / f"analysis_{task_id}.xlsx"
    if out_file.exists():
        return FileResponse(out_file, filename=out_file.name)
    return {"error": "–§–∞–π–ª –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"}

# gpt
# @app.get("/download/{task_id}")
# async def download_file(task_id: str):
#     file_path = RESULTS_DIR / f"analysis_{task_id}.xlsx"
#     if file_path.exists():
#         return FileResponse(
#             file_path,
#             filename=f"analysis_{task_id}.xlsx",
#             media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
#         )
#     return JSONResponse({"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status_code=404)
